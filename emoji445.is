/// @ 0.16.0
/**
 *  本家様に圧倒的感謝ぁ　play/9p3wsng6av2e0bkm
 *  2024/08/10 本家様の変更をマージしました。確率を調整しました。
 *  2025/02/06 小さな文字を含む絵文字も見やすいように結果画面の絵文字をでかくしました。
 *  2025/05/17 どの絵文字も同じ確率で出現するように数学の確率論に基づく計算式に変更しました。
 */

// 各絵文字集合の要素数(随時更新)
let FOUR            = 1020
let FOUR_2          = 536
let FIVE            = 919
let FOUR_FOUR       = 292
let FOUR_FIVE       = 96
let FOUR_FOUR_FIVE  = 27

// どの要素も同じ確率で抽出される条件の計算用
let k = 100 / ((FOUR + FOUR_2 + FOUR_FIVE) / 2 + (FOUR_FOUR + FOUR_FOUR_FIVE))

/**
 * 絵文字組み合わせパターン
 * pattern: 組み合わせパターン
 * prob: そのパターンが出る確率
 */
let patterns = [
  {pattern: [FOUR_FOUR_FIVE],     prob: FOUR_FOUR_FIVE * k}, // 445
  {pattern: [FOUR, FOUR_FIVE],    prob: FOUR_FIVE * k}, // 4/45
  {pattern: [FOUR_FOUR, FIVE],    prob: FOUR_FOUR * k}, // 44/5
  {pattern: [FOUR, FOUR_2, FIVE], prob: FOUR_2 * k}, // 4/2+2/5
  {pattern: [FOUR, FOUR, FIVE],   prob: (FOUR - FOUR_FIVE - FOUR_2) / 2 * k}  // 4/4/5
]

// 乱数生成器
let random = Math:gen_rng(`{USER_ID}{Date:now()}`)

// 絵文字リスト格納用
var emojis = []

/* 
 * 指定したページ内の先頭の枠のテキスト取ってくる 
 * @param _username スクリーンネーム(@のやつ)
 * @param _name ページ名(URLの末尾のやつ)
 */
@readPages(_username, _name) {
  let page = Mk:api("pages/show", {name: _name, username: _username}).content[0].text
  return Json:parse(page)
}

/*
 * 445作る
 * @param emojis 445作るのに使う絵文字リスト
 */
@getYonyongo(emojis) {
  // 445組み合わせパターン決定
  let r = random(1 1000) / 10
  var pattern = []
  var prob_sum = 0

  for (let i, patterns.len) {
    prob_sum += patterns[i].prob
    if (r < prob_sum) {
      pattern = patterns[i].pattern
      break
    }
  }

  let result = []

  // 絵文字の選択肢決定
  each (let p, pattern) {
    var choices = []
    
    match true {
      p == FOUR           => choices = emojis.four
      p == FOUR_2         => choices = emojis.four_2
      p == FIVE           => choices = emojis.five
      p == FOUR_FOUR      => choices = emojis.four_four
      p == FOUR_FIVE      => choices = emojis.four_five
      p == FOUR_FOUR_FIVE => choices = emojis.four_four_five
    }
    if (choices.len <= 0) {
      choices = ["えらー"]
    }
    
    result.push(choices[random(0 choices.len - 1)])
  }
  
  return result.join()
}

/**
 * 結果を表示する
 * @param result リザルト
 */
@render(result) {
  // UIを表示
  Ui:render([
    Ui:C:container({
      align: 'center',
      children: [
        Ui:C:mfm({ text: `$[x2 {result}]` })
        Ui:C:button({
          text: "次の四四五",
          onClick: main
        })
        Ui:C:postFormButton({
          text: "投稿する",
          primary: true,
          form: {
            text: `{result}{Str:lf}#絵文字四四五調{Str:lf}{THIS_URL}`
          }
        })
      ]
    })
  ])
}

/**
 * メイン関数
 */
@main() {
  let yonyongo = getYonyongo(emojis)
  render(yonyongo)
}

emojis = readPages("Fluoroid", "emoji445")
main()